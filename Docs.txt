++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SynthBite16 - A 16 bit computer with complete micro-programmed control
Design, implementation and documentations by 'HarshaVardhan Rapeti'
++++++++++++++++++++++++++++++++++++++++++++++++++++++++


-----------------------------------------
The design mainly focuses on : 

1 -> FLEXIBILITY - Leftover microinstructions can be modified by the user to create their custom instructions.
2 -> INSTRUCTION SET COMPLETENESS - All basic instructions that are required for a basic computer will be implemented
3 -> COOL EXTRA INSTRUCTIONS - Instructions for calculating some video game related calculations.
			     - for example : Inverse of the number in AC, Square root etc...
------------------------------------------

INSTRUCTION FORMAT
------------------

General Instruction format:

    'XXXX XXXX XXXX XXXX'
     ^^^^ ^^^^ ^^^^ ^^^^
      1    2    3    4


1       ->  CONTAINS THE OP-CODE(12-14) AND THE MODE OF ADDRESSING(15). 
2, 3, 4 ->  CONTAINS THE OPERAND, CAN BE A ADDRESS OR DATA DIRECTLY - WILL BE DISTINGUISHED FROM THE OP-CODE 

*the numbers in the bracketts represent the part of the respective data in the whole word.
**indexing starts from 0 from the LSB.

+++AS YOU CAN SEE THE WORD(16 bits) CAN BE DIVIDED INTO 4 '4-bit' 'BINARY REPRESENTED HEX VALUES' OR A NIBBLE.
+++SO ALL THE INSTRUCTIONS FROM NOW ON WILL BE REPRESENTED AS 4 HEX VALUES, WHICH IS EQUAL TO THE WHOLE WORD.
+++ANY X MEANS 'DO NOT CARE ABOUT THOSE VALUES WHILE DECODING THE INSTRUCTION'




REGISTERS AND THEIR USES
------------------------
 
Name	Size(bits)	FullForm		Use
-------------------------------------------------------------------------------------------------------------
AC	16		ACCUMULATOR		STORES THE CURRENT DATA WE ARE WORKING WITH.
PC	12		PROGRAM COUNTER		STORES THE ADDRESS OF THE NEXT INSTRUCTION TO BE EXECUTED.
DR 	16		DATA REGISTER		STORES THE OPERAND OF AN INSTRUCTIONS(VALUE AT ADDRESS WILL BE THE OPERAND).
IR	16		INSTRUCTION REGISTER	STORES THE CURRENT FULL INSTRUCTION WORD(TO BE DECODED AND EXECUTED).
AR	12		ADDRESS REGISTER	STORES THE ADDRESS FROM 'PC'(TYPICALLY), CAN STORE ANY ADDRESS. 
CR	8		COMPARISION REGISTER	STORES THE RESULTS FROM A 'CMP' INSTRUCTION.

INPR	8		INPUT REGISTER		STORES AN INPUT(CHAR) FROM AN EXTERNAL DEVICE.
OUTR	8		OUTPUT REGISTER		STORES THE OUTPUT CHAR.

SP	12		STACK POINTER		STORES THE TOP OF THE INSTRUCTION STACK.

CMR	12		CONTROL MEMORY REGISTER	THIS IS THE MAPPED VALUE OF THE INPUT DECODED INSTRUCTION, THE MICRO INSTRUCTIONS AT THIS POSITIONS WILL BE EXECUTED.
CDR	12		CONTROL DATA REGISTER	STORES THE NEXT THING TO BE DONE AFTER A CERTAIN MICROINSTRUCTION IS EXECUTED, WILL FEEDBACK TO THE CONTROL SEQUENCER.




STATUS BITS AND THEIR USES
--------------------------

Name	FullForm		Use
---------------------------------------------------------------------------------------------------------------
E	OVERFLOW(TYPICALY)	CAN SEE THE OVERFLOW WHILE PERFORMING ARTHIMETIC ON AC USING ALU.
IEN	INTERRUPT ENABLE	WILL DECIDE IF INTERRUPT CAN OCCUR OR NOT(IF 0 INTERRUPT HAS TO WAIT FOR NEXT INSTRUCTION...).
R	INTERRUPT FLIP-FLOP	TELLS THE CPU TO SERVICE THE INTERRUPT.
FGI	INPUT FLAG		WILL TELL YOU IF YOU NEED TO DO AN INTERRUPT AND DO SOMETHING WITH THE INPUT.
FGO 	OUTPUT FLAG		WILL TELL YOU IF SOME DEVICE IS WAITING FOR AN OUTPUT.







VIRTUAL STATUS BITS AND THEIR USES
----------------------------------
--they are not any extra registers, they are a part of an existing registers, but convey something other than the rest of the bits.


Position	Use
----------------------------------------------------------------------------------------------------------------
AC(15)		SIGN OF THE NUMBER IF THERE IS ONE IN THE ACCUMULATOR
IE(15)		DIRECT AND INDIRECT ADDRESSING BIT





C.I.S.C - COMPLEX INSTRUCTION SET COMPUTER
------------------------------------------
* HERE I AM HAVING 12 BITS AS THE MAPPED OUPUT FROM THE INPUT MEMORY WHICH CAN ADDRESS UPTO 4096 ADDRESSES.
* SO OUR ROM CAN HAVE A LOT OF MICRO-INSTRUCTIONS(EXACT NUMBER DEPENDS ON EACH IMPLEMENTAION).




HOW THIS WORKS(HOW ARE INSTRUCTIONS EXECUTED)
=============================================

1 -> FIRST THE PROGRAMMER IS GOING TO WRITE THE PROGRAM IN THE FORM OF VALID INSTRUCTIONS.
2 -> THE COMPUTER STARTS EXECUTING INSTRUCTIONS STARTING FROM A PREDEFINED ADDRESS.
3 -> WHEN AN INSTRUCTION IS FED INTO THE CONTROL MAPPER.
	- THE 16 BIT INSTRUCTION IS MAPPED TO A 12 BIT ADDRESS IN THE CONTROL MEMORY.
	- THE CONRTOL SEQUENCER IS THE FIRST THING OUR 12 MAPPED BITS ARE GOING TO SEE, THE CONTROL SEQUENCER DECIDES WHAT TO DO AFTER THIS : 
		- IF THE FEEDBACK FROM THE CONTROL DATA REGISTER IS TELLING TO TAKE THE NEXT INSTRUCTION
			-THE PRESENT INSTRUCTION IS TAKEN IN AND THEN PUT INTO THE CONTROL REGISTER,
			-THE MICROINSTRUCTIONS CAN TAKE DIFFERENT CLOCK CYCLES TO EXECUTE.
			-SO THE END OF THE MICROINSTRUCTION WILL CONTAIN RELATED TO IT(MORE DETAILES WILL BE GIVEN LATER)
			-BASED ON THE END OF THE MICRO-INSTRUCTION, THE CONTROL SEQUENCER WILL DECIDE WHAT EXACTLY TO DO NEXT,
				-ANOTHER MICROINSTRUCTION ETC...
4 -> 









